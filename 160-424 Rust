Rust is a compiled low-level language developped in 2015 aiming to be as same speed as c++

Rust goals: fast. secure. productive.

Rust is completely memory safe. This means that exploits involving memory aren't possible in Rust, unless you explicitly specify unsafe Rust code.

The memory safety is guaranteed by the concept of ownership. All Rust code follows these rules:

Each value has a variable, called an owner.
There can only be one owner at a time.
When the owner goes out of scope, the value will be dropped.
Values can be moved or borrowed between variables, but no value can have more than 1 owner.

Foreign function interfacing : Rust supports calls from functions written in other languages.



Install rust with the rustup script

Use cargo to work with rust

Simple Hello World in Rust: fn main() {
    println!("Hello, world!");
}

! represents macro

Steps to create rust program using Cargo.

1. Create a folder for the project, cd into it, and run cargo init. This will create necessary files. example is the cargo.toml file which holds infos about your project like name, author, version...

every rust project needs main.rs as file, it is in src directory. this is your main file to write code

2. Run your program with cargo run. cargo will compile code and create files in the target directory. program runs.

you could also run your program in two steps, first you build to get a binary and then you use the binary to run the program.

cargo build for unoptimized build / cargo build --release for optimezed build. Rust actualy has 4 profiles for optimization level, 0 to 3

declare constant in Rust with 'const' keyword. they are immutable and will always be immutable. tradition to name constant in all uppercase

Example :

const THREE_ThOUSAND: u32 = 3_000; // _ 1s just for readabilily, it is used to denote space

fn main(){
    let word = "Rustceans";
    let word = word.len();
    println!("Rustceans is {} long", word)
}

In that main function, we have changed the type of the immutable variable word, but it still immutable after all operations. We say that the second word shadows the first one.

But the above wont work on a mutable variable as it can't change type. The same applies to a constant.

let ports: u32 = 65535

The : u32 states that the variable ports is of size u32.

The u means unsigned, and the 32 is how many bits it has.

Unsigned integers can only ever be positive, signed integers can be both positive and negative.

Integers range from 16 bits up to 128 bits. Some operating systems can't use integers higher than u32, and using such large integer types may slow down the program on some systems.

There are two types of strings in Rust. String and &str.

String is a growable allocated data structure whereas str is an immutable fixed-length string somewhere in memory.

&str is a string slice of string.

What's the smallest sized signed integer in rust is i16

Create a mutable u32 variable called "tryhackme" and assign it the number 9 ------> let mut tryhackme: u32 = 9

lite 'tryhackme: u32', 'datastructures: String' is called typehinting. we hint tryhackme to be a variable holding an unsigned integer and datastructures to be a variable holding a string.











