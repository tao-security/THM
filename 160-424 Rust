Rust is a compiled low-level language developped in 2015 aiming to be as same speed as c++

Rust goals: fast. secure. productive.

Rust is completely memory safe. This means that exploits involving memory aren't possible in Rust, unless you explicitly specify unsafe Rust code.

The memory safety is guaranteed by the concept of ownership. All Rust code follows these rules:

Each value has a variable, called an owner.
There can only be one owner at a time.
When the owner goes out of scope, the value will be dropped.
Values can be moved or borrowed between variables, but no value can have more than 1 owner.

Foreign function interfacing : Rust supports calls from functions written in other languages.



Install rust with the rustup script

Use cargo to work with rust

Simple Hello World in Rust: fn main() {
    println!("Hello, world!");
}

! represents macro

Steps to create rust program using Cargo.

1. Create a folder for the project, cd into it, and run cargo init. This will create necessary files. example is the cargo.toml file which holds infos about your project like name, author, version...

every rust project needs main.rs as file, it is in src directory. this is your main file to write code

2. Run your program with cargo run. cargo will compile code and create files in the target directory. program runs.

you could also run your program in two steps, first you build to get a binary and then you use the binary to run the program.

cargo build for unoptimized build / cargo build --release for optimezed build. Rust actualy has 4 profiles for optimization level, 0 to 3

declare constant in Rust with 'const' keyword. they are immutable and will always be immutable. tradition to name constant in all uppercase

Example :

const THREE_ThOUSAND: u32 = 3_000; // _ 1s just for readabilily, it is used to denote space

fn main(){
    let word = "Rustceans";
    let word = word.len();
    println!("Rustceans is {} long", word)
}

In that main function, we have changed the type of the immutable variable word, but it still immutable after all operations. We say that the second word shadows the first one.

But the above wont work on a mutable variable as it can't change type. The same applies to a constant.

let ports: u32 = 65535

The : u32 states that the variable ports is of size u32.

The u means unsigned, and the 32 is how many bits it has.

Unsigned integers can only ever be positive, signed integers can be both positive and negative.

Integers range from 16 bits up to 128 bits. Some operating systems can't use integers higher than u32, and using such large integer types may slow down the program on some systems.

There are two types of strings in Rust. String and &str.

String is a growable allocated data structure whereas str is an immutable fixed-length string somewhere in memory.

&str is a string slice of string.

What's the smallest sized signed integer in rust is i16

Create a mutable u32 variable called "tryhackme" and assign it the number 9 ------> let mut tryhackme: u32 = 9

lite 'tryhackme: u32', 'datastructures: String' is called typehinting. we hint tryhackme to be a variable holding an unsigned integer and datastructures to be a variable holding a string.


fn to_ip_address(ip: String) -> IpAddr{   -----> is just the head for function definition by means the function takes in a string as argument and return a value of type IpAddr.

to return something we use return, to break out of a loop, we use break.

if a function returns an integer, the last expression could just be '6', and because 6 always evaluate to 6, it is valid. but not something like six: u16

a function can be nested inside a function with the same name.

There are 3 loops in rust: loop, while and for.

'loop' will loop infinetly intill we tell it to stop with break keyword or ctrl+c

fn main(){
    loop {
        println!("This is an infinity loop!");
        break;
    }
}

'while' loop lopps while the condition is true.

fn main(){
let number: u16 = 9;
while number != 0 {
println!("Number {} ", number);
number -= 1;
}
}

'for' loop can be used to iterate over elements of collection.

fn main(){
let vowels = ['a','e','i','o','u'];
for element in vowels.iter() {
    println!("This is a vowel : {}", element);
    }
}

Note that we turn vowels into an iterable with vowels.iter()

Zero cost abstraction is:

"What you don’t use, you don’t pay for. And what you do use, you couldn’t do any better if you coded by hand."

Let’s talk about the 2 parts of this sentence.

"What you don’t use, you don’t pay for."

The language shouldn’t have a global cost for a feature that isn’t used. Let’s say to use a for loop, the language needs to have some massive 1gb file that slows down everything else. If we never use a for loop, we still pay for the for loop!

"And what you do use, you couldn’t do any better if you coded by hand."

Here’s the kicker.

Say you wrote some code, a function that calculated Fibonacci numbers. And you compiled this code down into assembly.

Now let’s say you hand-write assembly to do the same function — calculate Fibonacci numbers but this time in assembly.

Handwriting it in assembly would mean we would either gain no performance, or we would lose performance.

By using zero cost abstractions, we write abstracted code (not handwritten assembly) and we couldn’t do any better if we tried to hand-write assembly. Now that’s cool!

fn sum_of_squares(input: &[i32]) -> i32 {
    input.iter()
         .map(|&i| i * i)
         .sum()
}
This is our previous code.

use rayon::prelude::*;
fn sum_of_squares(input: &[i32]) -> i32 {
    input.par_iter() // <-- just change that!
         .map(|&i| i * i)
         .sum()
}

what permits to to apply threading to the iter is RAYON external crate (library) for rust. // instead of input.iter(), we use input.par_iter() to apply multi-threading. 

in Rust. we can assign values based on if statement on one line. eg. .....> let result = if var == 6 {15} else {200};

In Rust, unless you explitely tell the compiler to not, errors must always be handled.

Errors handling in Rust:

1. use of unwrap() :: it just tell the compiler to go ahead, the value is appropriate, but if it not, rust will return an error,

use std::fs::File;

fn main() {
    let f = File::open("hello.txt").unwrap();
}

2. match : just just work like try except in python // If alright we proceed but if not, then Error

use std::fs::File;

fn main() {
    let f = File::open("hello);
    match f {
        Ok(file) => file,
        Err(_) => panic!("Couldn't open file."),
    }
}

3. ?

The ? operator states "if the result is Ok, carry on in this function. Else if it is an Err, propagate it back up the stack to the function that called me. "

fn read_username_from_file() -> Result<String, io::Error> {
    let f = File::open("username.txt");

    let mut f = match f {
        Ok(file) => file,
        Err(e) => return Err(e),
    };

    let mut s = String::new();

    match f.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}
We have 2 matches in this code. A bit unruly. Ideally if we fail to open the file, or fail to read to string we propagate a single error back up the stack saying that this function failed.

If it didn't, we should return the Ok result. That way, the function that called us will receive a Result type that it can more easily handle, and without us dealing with multiple match statements.

fn read_username_from_file() -> Result<String, io::Error> {
    let mut f = File::open("username.txt")?;
    let mut s = String::new();

    f.read_to_string(&mut s)?;

    Ok(s)
}
Conclusion
This is one of the most important concepts in Rust. Errors normally do not happen, because every error has to be dealt with in some way. This helps keep your code safe.


So if you are sure the result will return Ok, you use unwrap. If you suspect an Error, you use '?'











